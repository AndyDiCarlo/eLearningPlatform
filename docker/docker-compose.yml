version: "3.8"

services:
  # PostgreSQL for Enrollment Service
  enrollmentdb:
    image: postgres:latest
    container_name: enrollmentdb
    ports:
      - "5435:5432"
    environment:
      POSTGRES_USER: dev
      POSTGRES_PASSWORD: dev
      POSTGRES_DB: enrollmentservice_db
    volumes:
      - ./sql/init_enrollment.sql:/docker-entrypoint-initdb.d/1-init_enrollment.sql
      - ./sql/data_enrollment.sql:/docker-entrypoint-initdb.d/2-data_enrollment.sql
    networks:
      backend:
        aliases:
          - "enrollmentdb"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U dev -d enrollmentservice_db"]
      interval: 10s
      timeout: 5s
      retries: 5
  # PostgreSQL for User Service
  userdb:
    image: postgres:latest
    container_name: userdb
    ports:
      - "5433:5432"
    environment:
      POSTGRES_USER: dev
      POSTGRES_PASSWORD: dev
      POSTGRES_DB: userservice_db
    volumes:
      - ./sql/init_user.sql:/docker-entrypoint-initdb.d/1-init_user.sql
      - ./sql/data_user.sql:/docker-entrypoint-initdb.d/2-data_user.sql
    networks:
      backend:
        aliases:
          - "userdb"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U dev -d userservice_db" ]
      interval: 10s
      timeout: 5s
      retries: 5

  # PostgreSQL for Course Service
  coursedb:
    image: postgres:latest
    container_name: coursedb
    ports:
      - "5434:5432"
    environment:
      POSTGRES_USER: prod
      POSTGRES_PASSWORD: prod
      POSTGRES_DB: courseservice_db
    volumes:
      - ./sql/init_course.sql:/docker-entrypoint-initdb.d/1-init_course.sql
      - ./sql/data_course.sql:/docker-entrypoint-initdb.d/2-data_course.sql
    networks:
      backend:
        aliases:
          - "coursedb"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U prod -d courseservice_db" ]
      interval: 10s
      timeout: 5s
      retries: 5

  # Config Server
  configserver:
    build:
      context: "../configserver"
      dockerfile: Dockerfile
      args:
        JAR_FILE: target/configserver-0.0.1-SNAPSHOT.jar
    image: elearning/configserver:0.0.1-SNAPSHOT
    container_name: configserver
    ports:
      - "8089:8089"
    environment:
      SERVER_PORT: "8089"
      GITHUB_USERNAME: "Nicholas-Bava"
      GITHUB_PASSWORD: "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"
    networks:
      backend:
        aliases:
          - "configserver"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8089/" ]
      interval: 10s
      timeout: 5s
      retries: 5

  userservice:
    build:
      context: "../user-service"
      dockerfile: Dockerfile
      args:
        JAR_FILE: target/user-service-0.0.2-SNAPSHOT.jar
    image: elearning/userservice:0.0.2-SNAPSHOT
    container_name: userservice
    ports:
      - "8081:8080"  # Maps host 8081 to container 8080
    environment:
      SPRING_APPLICATION_NAME: user-service
      SPRING_PROFILES_ACTIVE: dev
      SPRING_CONFIG_IMPORT: "optional:configserver:http://configserver:8089/"
      CONFIGSERVER_URI: "http://configserver:8089"
      CONFIGSERVER_PORT: "8089"
      SPRING_DATASOURCE_URL: jdbc:postgresql://userdb:5432/userservice_db
      SPRING_DATASOURCE_USERNAME: dev
      SPRING_DATASOURCE_PASSWORD: dev
      GITHUB_USERNAME: "Nicholas-Bava"
      GITHUB_PASSWORD: "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"
    depends_on:
      userdb:
        condition: service_healthy
      configserver:
        condition: service_started
      eurekaserver:
        condition: service_started
      keycloak:
        condition: service_started
    networks:
      backend:
        aliases:
          - "userservice"

    # Course Service
  courseservice:
    build:
      context: "../course-service"
      dockerfile: Dockerfile
      args:
        JAR_FILE: target/course-service-0.0.2-SNAPSHOT.jar
    image: elearning/courseservice:0.0.2-SNAPSHOT
    container_name: courseservice
    ports:
      - "8082:8080"  # Maps host 8082 to container 8080
    environment:
      SPRING_APPLICATION_NAME: course-service
      SPRING_PROFILES_ACTIVE: prod
      SPRING_CONFIG_IMPORT: "optional:configserver:http://configserver:8089/"
      CONFIGSERVER_URI: "http://configserver:8089"
      CONFIGSERVER_PORT: "8089"
      SPRING_DATASOURCE_URL: jdbc:postgresql://coursedb:5432/courseservice_db
      GITHUB_USERNAME: "Nicholas-Bava"
      GITHUB_PASSWORD: "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"
    depends_on:
      coursedb:
        condition: service_healthy
      configserver:
        condition: service_started
      eurekaserver:
        condition: service_started
      keycloak:
        condition: service_started
    networks:
      backend:
        aliases:
          - "courseservice"

  # Enrollment Service
  enrollmentservice:
    build:
      context: "../enrollment-service"
      dockerfile: Dockerfile
      args:
        JAR_FILE: target/enrollment-service-0.0.1-SNAPSHOT.jar
    image: elearning/enrollmentservice:0.0.1-SNAPSHOT
    container_name: enrollmentservice

    environment:
      SPRING_APPLICATION_NAME: enrollment-service
      SPRING_PROFILES_ACTIVE: dev
      SPRING_CONFIG_IMPORT: "optional:configserver:http://configserver:8089/"
      CONFIGSERVER_URI: "http://configserver:8089"
      CONFIGSERVER_PORT: "8089"
      SPRING_DATASOURCE_URL: jdbc:postgresql://enrollmentdb:5432/enrollmentservice_db
      SPRING_DATASOURCE_USERNAME: dev
      SPRING_DATASOURCE_PASSWORD: dev
      GITHUB_USERNAME: "Nicholas-Bava"
      GITHUB_PASSWORD: "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"
    ports:
      - "8083:8080"
    depends_on:
      enrollmentdb:
        condition: service_healthy
      configserver:
        condition: service_started
      eurekaserver:
        condition: service_started
      keycloak:
        condition: service_started
    networks:
      backend:
        aliases:
          - "enrollmentservice"

  eurekaserver:
    build:
      context: "../eurekaserver"
      dockerfile: Dockerfile
      args:
        JAR_FILE: target/eurekaserver-0.0.1-SNAPSHOT.jar
    image: elearning/eurekaserver:0.0.1-SNAPSHOT
    ports:
      - "8070:8070"
    environment:
      SPRING_APPLICATION_NAME: eureka-server
      EUREKA_INSTANCE_HOSTNAME: eurekaserver
      SPRING_CONFIG_IMPORT: "optional:configserver:http://configserver:8089/"
      CONFIGSERVER_URI: "http://configserver:8089"
      CONFIGSERVER_PORT: "8089"
      GITHUB_USERNAME: "Nicholas-Bava"
      GITHUB_PASSWORD: "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"
    depends_on:
      enrollmentdb:
        condition: service_healthy
      configserver:
        condition: service_started
    networks:
      backend:
        aliases:
          - "eurekaserver"

  gatewayserver:
    build:
      context: "../gatewayserver"
      dockerfile: Dockerfile
      args:
        JAR_FILE: target/gatewayserver-0.0.1-SNAPSHOT.jar
    image: elearning/gatewayserver:0.0.1-SNAPSHOT
    ports:
      - "8072:8072"
    environment:
      PROFILE: "default"
      SERVER_PORT: "8072"
      SPRING_CONFIG_IMPORT: "optional:configserver:http://configserver:8089/"
      CONFIGSERVER_URI: "http://configserver:8089"
      EUREKASERVER_URI: "http://eurekaserver:8070/eureka/"
      EUREKASERVER_PORT: "8070"
      CONFIGSERVER_PORT: "8089"
      ENCRYPT_KEY: "IMSYMMETRIC"
      SPRING_CLOUD_CONFIG_FAIL_FAST: "true"
      SPRING_MAIN_ALLOW_BEAN_DEFINITION_OVERRIDING: "true"
    depends_on:
      enrollmentdb:
        condition: service_healthy
      configserver:
        condition: service_started
      eurekaserver:
        condition: service_started
    networks:
      backend:
        aliases:
          - "gateway"

  keycloak:
    container_name: keycloak
    image: quay.io/keycloak/keycloak:24.0.0
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KC_DB: dev-file
      KC_HEALTH_ENABLED: true
      KC_HOSTNAME: keycloak
    ports:
      - "8080:8080"
    volumes:
      - ./elearn-realm.json:/opt/keycloak/data/import/elearn-realm.json
    command:
      - "start-dev"
      - "--import-realm"
    networks:
      backend:
        aliases:
          - "keycloak"
    restart: on-failure:1

  keycloak-service:
    build:
      context: ../keycloak_service
      dockerfile: Dockerfile
    ports:
      - "5000:5000"
    depends_on:
      - keycloak
    environment:
      - KEYCLOAK_URL=http://keycloak:8080
      - KEYCLOAK_ADMIN=admin
      - KEYCLOAK_ADMIN_PASSWORD=admin
      - TARGET_REALM=elearn-realm
    networks:
      backend:
        aliases:
          - "keycloakservice"
  mailhog:
    container_name: mailhog
    image: mailhog/mailhog
    ports:
      - "1025:1025"  # SMTP port
      - "8025:8025"  # Web UI port
    networks:
      backend:
        aliases:
          - "mailhog"

  zipkin: 
    image: openzipkin/zipkin 
    container_name: zipkin
    depends_on: 
      - elasticsearch
    environment: 
      - STORAGE_TYPE=elasticsearch
      - "ES_HOSTS=elasticsearch:9300"
    ports:
      - "9411:9411"
    networks:
      backend:
        aliases:
          - "zipkin"

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.7.0
    container_name: elasticsearch
    environment:
      - node.name=elasticsearch
      - discovery.type=single-node
      - cluster.name=docker-cluster
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - esdata1:/usr/share/elasticsearch/data
    ports:
      - 9300:9300
      - 9200:9200
    networks:
      backend:
        aliases:
          - "elasticsearch"
  kibana:
    image: docker.elastic.co/kibana/kibana:7.7.0
    container_name: kibana
    environment:
      ELASTICSEARCH_URL: "http://elasticsearch:9300"
    ports:
      - 5601:5601
    networks:
      backend:
        aliases:
          - "kibana"
    depends_on:
      - elasticsearch

  logstash:
    image: docker.elastic.co/logstash/logstash:7.7.0
    container_name: logstash
    command: logstash -f /etc/logstash/conf.d/logstash.conf
    volumes:
      - ./config:/etc/logstash/conf.d
    ports:
      - "5000:5000"
    networks:
      backend:
        aliases:
          - "logstash"
    healthcheck:
      test: bin/logstash -t
      interval: 60s
      timeout: 50s
      retries: 5
    depends_on:
      - elasticsearch

volumes:
  esdata1:
    driver: local
networks:
  backend:
    driver: bridge
